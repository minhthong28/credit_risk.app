import streamlit as st
import pandas as pd
import pickle
from catboost import CatBoostClassifier


@st.cache_resource
def load_model():
    with open('D:/vs code/Exercise/LearningPython/CreditRisk_Project/catboost_model.pkl', 'rb') as file:
        model = pickle.load(file)
    return model


def main():
    st.title(" D·ª± ƒêo√°n R·ªßi Ro T√≠n D·ª•ng üè¶ ")
    st.write("Nh·∫≠p th√¥ng tin c·ªßa kh√°ch h√†ng ƒë·ªÉ d·ª± ƒëo√°n kho·∫£n vay c√≥ kh·∫£ nƒÉng v·ª° n·ª£ hay kh√¥ng")

    # Nh·∫≠p th√¥ng tin c∆° b·∫£n
    age = st.slider("Tu·ªïi", min_value=20, max_value=80, value=30)
    income = st.number_input("Thu nh·∫≠p h√†ng nƒÉm ($)", min_value=0, value=50000)
    loan_amount = st.number_input("S·ªë ti·ªÅn vay ($)", min_value=0, value=10000)
    employment_years = st.number_input("S·ªë nƒÉm l√†m vi·ªác", min_value=0, max_value=50, value=5)
    loan_int_rate = st.number_input("L√£i su·∫•t kho·∫£n vay (%)", min_value=0.0, max_value=100.0, value=5.0)

    # T√≠nh to√°n t·ª∑ l·ªá thu nh·∫≠p tr√™n s·ªë ti·ªÅn vay
    if loan_amount != 0:
        loan_percent_income = (loan_amount / income) * 100
    else:
        loan_percent_income = 0

    st.write(f"T·ª∑ l·ªá thu nh·∫≠p tr√™n s·ªë ti·ªÅn vay: {loan_percent_income:.2f}%")
    cred_hist_length = st.number_input("S·ªë nƒÉm l·ªãch s·ª≠ t√≠n d·ª•ng", min_value=0, max_value=100, value=10)

    # L·ª±a ch·ªçn th√¥ng qua combobox
    home_ownership = st.selectbox(
        "S·ªü h·ªØu nh√†",
        options=["MORTGAGE", "OTHER", "OWN", "RENT"]
    )

    loan_intent = st.selectbox(
        "M·ª•c ƒë√≠ch vay",
        options=["DEBTCONSOLIDATION", "EDUCATION", "HOMEIMPROVEMENT", "MEDICAL", "PERSONAL", "VENTURE"]
    )

    loan_grade = st.selectbox(
        "ƒêi·ªÉm t√≠n d·ª•ng",
        options=["A", "B", "C", "D", "E", "F", "G"]
    )

    default_on_file = st.selectbox(
        "L·ªãch s·ª≠ v·ª° n·ª£",
        options=["N", "Y"]
    )

    # T·∫°o DataFrame t·ª´ ƒë·∫ßu v√†o
    input_data = pd.DataFrame({
        'person_age': [age],
        'person_income': [income],
        'person_emp_length': [employment_years],
        'loan_amnt': [loan_amount],
        'loan_int_rate': [loan_int_rate],
        'loan_percent_income': [loan_percent_income],
        'cb_person_cred_hist_length': [cred_hist_length],
        'person_home_ownership': [home_ownership],
        'loan_intent': [loan_intent],
        'loan_grade': [loan_grade],
        'cb_person_default_on_file': [default_on_file]
    })

    # One-Hot Encoding c√°c c·ªôt ƒë·ªãnh t√≠nh
    input_data_encoded = pd.get_dummies(input_data)

    # Load model
    model = load_model()

    # ƒê·∫£m b·∫£o c√°c ƒë·∫∑c tr∆∞ng ph√π h·ª£p v·ªõi m√¥ h√¨nh
    expected_features = model.feature_names_
    for feature in expected_features:
        if feature not in input_data_encoded.columns:
            input_data_encoded[feature] = 0  # Th√™m c·ªôt thi·∫øu v√† g√°n gi√° tr·ªã 0
    input_data_encoded = input_data_encoded[expected_features]

    # D·ª± ƒëo√°n
    if st.button("D·ª± ƒêo√°n"):
        prediction = model.predict(input_data_encoded)
        probability = model.predict_proba(input_data_encoded)[0]  # L·∫•y x√°c su·∫•t d·ª± ƒëo√°n

        if prediction[0] == 1:
            st.error(f"Kh√°ch h√†ng n·∫±m trong nh√≥m nguy c∆° cao v·ª° n·ª£ kho·∫£n vay (X√°c su·∫•t: {probability[1]:.2%})")
        else:
            st.success(f"Kh√°ch h√†ng c√≥ nguy c∆° th·∫•p v·ª° n·ª£ kho·∫£n vay (X√°c su·∫•t: {probability[0]:.2%})")


if __name__ == '__main__':
    main()
